"""
"""

import phantom.rules as phantom
import json
from datetime import datetime, timedelta
def on_start(container):
    phantom.debug('on_start() called')
    
    # call 'File_hash' block
    File_hash(container=container)

    return

def Send_Mail_to_SOC_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Send_Mail_to_SOC_2() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Send_Mail_to_SOC_2' call
    formatted_data_1 = phantom.get_format_data(name='SOC_email_format_2')

    parameters = []
    
    # build parameters list for 'Send_Mail_to_SOC_2' call
    parameters.append({
        'cc': "",
        'to': "ashish.singh@contractor.qiagen.com",
        'bcc': "",
        'body': formatted_data_1,
        'from': "",
        'headers': "",
        'subject': "Malware alert detected",
        'attachments': "",
    })

    phantom.act(action="send email", parameters=parameters, assets=['smtp_test'], name="Send_Mail_to_SOC_2")

    return

def File_hash(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('File_hash() called')
    
    template = """{0}"""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.file_hash",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="File_hash")

    get_system_info_3(container=container)

    return

def TruStar_Hunt_file(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('TruStar_Hunt_file() called')

    # collect data for 'TruStar_Hunt_file' call
    formatted_data_1 = phantom.get_format_data(name='File_hash')

    parameters = []
    
    # build parameters list for 'TruStar_Hunt_file' call
    parameters.append({
        'file': formatted_data_1,
    })

    phantom.act(action="hunt file", parameters=parameters, assets=['trustar_phantom'], name="TruStar_Hunt_file")

    return

def decision_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_2() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.file_reputation_from_TruStar", ">=", 1],
            ["artifact:*.cef.file_reputation_from_Virustotal", ">=", 1],
        ],
        logical_operator='or')

    # call connected blocks if condition 1 matched
    if matched:
        join_SOC_email_format_2(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        Ticket_format(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    SOC_email_format(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

def create_ticket_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('create_ticket_1() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'create_ticket_1' call
    formatted_data_1 = phantom.get_format_data(name='Ticket_format')

    parameters = []
    
    # build parameters list for 'create_ticket_1' call
    parameters.append({
        'table': "incident",
        'fields': "{ \"assignment_group\":\"Datacenter-Wintel\", \"contact_type\": \"automation\", \"category\":\"Cyber Security\", \"subcategory\":\"Malware\", \"u_issue_type\":\"Virus Infection\", \"u_gmp\":\"No\" }",
        'vault_id': "",
        'description': formatted_data_1,
        'short_description': "QSOC-UC-002-(A)-Antivirus Virus Left Alone by AV Agent Symantec",
    })

    phantom.act(action="create ticket", parameters=parameters, assets=['test service now'], callback=join_SOC_email_format_2, name="create_ticket_1")

    return

def SOC_email_format_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('SOC_email_format_2() called')
    
    template = """Hi SOC team,

This alert is triggered when malware alert triggered on Symentac details are mentioned below and based on that please do Sandboxing and update the result on below mention Incident raised for wintel team.

UserID= {0}

Machine Name= {1}

File Path = {2}

File Hash= {3}

Reported action by Symantec = {4}

Incident Raised for wintel ={5}

TruStar file hash reputation details = {6} Report Found

Virus total file hash reputation details = {7} Positive Report found"""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.dest_owner",
        "artifact:*.cef.dest",
        "artifact:*.cef.filePath",
        "artifact:*.cef.file_hash",
        "artifact:*.cef.vendor_action",
        "create_ticket_1:action_result.data.*.number",
        "artifact:*.cef.file_reputation_from_TruStar",
        "artifact:*.cef.file_reputation_from_Virustotal",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="SOC_email_format_2")

    Send_Mail_to_SOC_2(container=container)

    return

def join_SOC_email_format_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None):
    phantom.debug('join_SOC_email_format_2() called')

    # check if all connected incoming playbooks, actions, or custom functions are done i.e. have succeeded or failed
    if phantom.completed(playbook_names=['playbook_local_Hunt_file_3'], action_names=['create_ticket_1']):
        
        # call connected block "SOC_email_format_2"
        SOC_email_format_2(container=container, handle=handle)
    
    return

def SOC_email_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('SOC_email_format() called')
    
    template = """Hi SOC Team,

Malware alert in Symantec triggered and after investigation found that Hash is  not malicious.
Please investigate and take action accordingly. If required please raise incident.

UserID= {0}

Machine Name= {1}

File Path = {2}

File Hash= {3}

Reported action by Symantec= {4}

TruStar file hash reputation details = {5}

Virus total file hash reputation details = {6} Positive Report found"""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.dest_owner",
        "artifact:*.cef.dest",
        "artifact:*.cef.filePath",
        "artifact:*.cef.fileHash",
        "artifact:*.cef.vendor_action",
        "artifact:*.cef.file_reputation_from_TruStar",
        "artifact:*.cef.file_reputation_from_Virustotal",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="SOC_email_format")

    Send_mail_to_SOC(container=container)

    return

def Send_mail_to_SOC(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Send_mail_to_SOC() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Send_mail_to_SOC' call
    formatted_data_1 = phantom.get_format_data(name='SOC_email_format')

    parameters = []
    
    # build parameters list for 'Send_mail_to_SOC' call
    parameters.append({
        'cc': "",
        'to': "ashish.singh@contractor.qiagen.com",
        'bcc': "",
        'body': formatted_data_1,
        'from': "",
        'headers': "",
        'subject': "Malware detected in Symantec",
        'attachments': "",
    })

    phantom.act(action="send email", parameters=parameters, assets=['smtp_test'], name="Send_mail_to_SOC")

    return

def decision_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('decision_3() called')

    # check for 'if' condition 1
    matched = phantom.decision(
        container=container,
        action_results=results,
        conditions=[
            ["artifact:*.cef.file_hash", "in", "File_hash:formatted_data"],
        ])

    # call connected blocks if condition 1 matched
    if matched:
        playbook_local_Hunt_file_3(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
        return

    # call connected blocks for 'else' condition 2
    SOC_email_format_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)
    Ticket_format_1(action=action, success=success, container=container, results=results, handle=handle, custom_function=custom_function)

    return

def scan_endpoint_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('scan_endpoint_3() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'scan_endpoint_3' call
    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.dest_ip', 'artifact:*.id'])
    formatted_data_1 = phantom.get_format_data(name='System_Unique_ID_fetched_1')

    parameters = []
    
    # build parameters list for 'scan_endpoint_3' call
    for container_item in container_data:
        parameters.append({
            'id': formatted_data_1,
            'type': "QUICK_SCAN",
            'timeout': 30,
            'ip_hostname': container_item[0],
            # context (artifact id) is added to associate results with the artifact
            'context': {'artifact_id': container_item[1]},
        })

    phantom.act(action="scan endpoint", parameters=parameters, assets=['symentec_test'], callback=decision_3, name="scan_endpoint_3")

    return

def SOC_email_format_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('SOC_email_format_1() called')
    
    template = """Hi SOC team,

This alert is triggered when malware alert triggered on Symentac details are mentioned below and based on that please do Sandboxing and update the result on below mention Incident raised for Wintel team.

UserID= {0}

Machine Name= {1}

File Path = {2}

File Hash= {3}

Reported action by Symantec= {4}

Nothing Suspicious found while checking file reputation please check at your end once and take action accordingly."""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.dest_owner",
        "artifact:*.cef.dest",
        "artifact:*.cef.filePath",
        "artifact:*.cef.fileHash",
        "artifact:*.cef.vendor_action",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="SOC_email_format_1")

    Send_mail_to_SOC_1(container=container)

    return

def Send_mail_to_SOC_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Send_mail_to_SOC_1() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'Send_mail_to_SOC_1' call
    formatted_data_1 = phantom.get_format_data(name='SOC_email_format_1')

    parameters = []
    
    # build parameters list for 'Send_mail_to_SOC_1' call
    parameters.append({
        'cc': "",
        'to': "ashish.singh@contractor.qiagen.com",
        'bcc': "",
        'body': formatted_data_1,
        'from': "",
        'headers': "",
        'subject': "Malware detected in Symantec",
        'attachments': "",
    })

    phantom.act(action="send email", parameters=parameters, assets=['smtp_test'], name="Send_mail_to_SOC_1")

    return

def create_ticket_2(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('create_ticket_2() called')
        
    #phantom.debug('Action: {0} {1}'.format(action['name'], ('SUCCEEDED' if success else 'FAILED')))
    
    # collect data for 'create_ticket_2' call
    formatted_data_1 = phantom.get_format_data(name='Ticket_format_1')

    parameters = []
    
    # build parameters list for 'create_ticket_2' call
    parameters.append({
        'table': "incident",
        'fields': "{ \"assignment_group\":\"Datacenter-Wintel\", \"contact_type\": \"automation\", \"category\":\"Cyber Security\", \"subcategory\":\"Malware\", \"u_issue_type\":\"Virus Infection\", \"u_gmp\":\"No\" }",
        'vault_id': "",
        'description': formatted_data_1,
        'short_description': "QSOC-UC-002-(A)-Antivirus Virus Left Alone by AV Agent Symantec",
    })

    phantom.act(action="create ticket", parameters=parameters, assets=['test service now'], name="create_ticket_2")

    return

def Virus_total_file_reputation(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Virus_total_file_reputation() called')

    # collect data for 'Virus_total_file_reputation' call
    formatted_data_1 = phantom.get_format_data(name='File_hash')

    parameters = []
    
    # build parameters list for 'Virus_total_file_reputation' call
    parameters.append({
        'hash': formatted_data_1,
    })

    phantom.act(action="file reputation", parameters=parameters, assets=['virus total'], name="Virus_total_file_reputation")

    return

def get_system_info_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('get_system_info_3() called')

    # collect data for 'get_system_info_3' call
    container_data = phantom.collect2(container=container, datapath=['artifact:*.cef.dest', 'artifact:*.id'])

    parameters = []
    
    # build parameters list for 'get_system_info_3' call
    for container_item in container_data:
        if container_item[0]:
            parameters.append({
                'hostname': container_item[0],
                # context (artifact id) is added to associate results with the artifact
                'context': {'artifact_id': container_item[1]},
            })

    phantom.act(action="get system info", parameters=parameters, assets=['symentec_test'], callback=System_Unique_ID_fetched_1, name="get_system_info_3")

    return

def System_Unique_ID_fetched_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('System_Unique_ID_fetched_1() called')
    
    template = """{0}"""

    # parameter list for template variable replacement
    parameters = [
        "get_system_info_3:action_result.data.*.uniqueId",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="System_Unique_ID_fetched_1")

    scan_endpoint_3(container=container)

    return

def Ticket_format_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Ticket_format_1() called')
    
    template = """Time:  {0} CET

Malware:-WS.Reputation.1

File Name = {1}
File Path = {2}
Destination Host = {3}
Destination Owner =  {4}

Vendor Action = {5}

Recommendation:-
1)Collect the infected file in zipped format and shared with us with password protected \"infected\".
2).Please run the Symantec full machine scan over the machine and share scan result.
3) Check whether the antivirus software is updated with latest security updates or not. If it is not updated, then it is highly recommended to update antivirus software with latest security updates. 

Assign Incident back to SOC team after all remediation steps."""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.time",
        "artifact:*.cef.fileName",
        "artifact:*.cef.filePath",
        "artifact:*.cef.dest",
        "artifact:*.cef.dest_owner",
        "artifact:*.cef.vendor_action",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Ticket_format_1")

    create_ticket_2(container=container)

    return

def Ticket_format(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('Ticket_format() called')
    
    template = """Time:  {0} CET

Malware:-WS.Reputation.1

File Name = {1}
File Path = {2}
Destination Host = {3}
Destination Owner =  {4}

Vendor Action = {5}

Recommendation:-
1)Collect the infected file in zipped format and shared with us with password protected \"infected\".
2).Please run the Symantec full machine scan over the machine and share scan result.
3) Check whether the antivirus software is updated with latest security updates or not. If it is not updated, then it is highly recommended to update antivirus software with latest security updates. 

Assign Incident back to SOC team after all remediation steps."""

    # parameter list for template variable replacement
    parameters = [
        "artifact:*.cef.time",
        "artifact:*.cef.fileName",
        "artifact:*.cef.filePath",
        "artifact:*.cef.dest",
        "artifact:*.cef.dest_owner",
        "artifact:*.cef.vendor_action",
    ]

    phantom.format(container=container, template=template, parameters=parameters, name="Ticket_format")

    create_ticket_1(container=container)

    return

def playbook_local_Hunt_file_3(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_Hunt_file_3() called')
    
    # call playbook "local/Hunt_file", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/Hunt_file", container=container, name="playbook_local_Hunt_file_3", callback=decision_2)

    return

def playbook_local_TEST22_1(action=None, success=None, container=None, results=None, handle=None, filtered_artifacts=None, filtered_results=None, custom_function=None, **kwargs):
    phantom.debug('playbook_local_TEST22_1() called')
    
    # call playbook "local/TEST22", returns the playbook_run_id
    playbook_run_id = phantom.playbook(playbook="local/TEST22", container=container)

    return

def on_finish(container, summary):
    phantom.debug('on_finish() called')
    # This function is called after all actions are completed.
    # summary of all the action and/or all details of actions
    # can be collected here.

    # summary_json = phantom.get_summary()
    # if 'result' in summary_json:
        # for action_result in summary_json['result']:
            # if 'action_run_id' in action_result:
                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)
                # phantom.debug(action_results)

    return